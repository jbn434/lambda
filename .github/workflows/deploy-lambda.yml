name: Deploy Lambda

on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'infra/**'
      - '.github/workflows/deploy-lambda.yml'

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì¶ Install dependencies
        working-directory: ./src
        run: npm ci

      - name: üõ†Ô∏è Build NestJS app
        working-directory: ./src
        run: npm run build

      - name: üìÅ Package Lambda as ZIP
        working-directory: ./src
        run: |
          npm prune --production
          zip -r ../infra/lambda/backend-api.zip dist node_modules package.json -x "**/*.map" "**/*.d.ts" "**/test/**"

      - name: ‚öôÔ∏è Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: üåç Terraform Lambda Init & Apply
        working-directory: ./infra/lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform init
          terraform apply -auto-approve -var-file=dev.tfvars

      - name: üåç Terraform EC2 Init & Apply
        working-directory: ./infra/ec2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform init
          terraform apply -auto-approve -var-file=dev.tfvars

      - name: üì§ Get EC2 Name Tag from Terraform
        id: ec2-name
        working-directory: ./infra/ec2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "EC2_NAME=$(terraform output -raw ec2_instance_name)" >> $GITHUB_OUTPUT

      - name: üõ†Ô∏è Install PostgreSQL via SSM
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EC2_NAME_TAG: ${{ steps.ec2-name.outputs.EC2_NAME }}
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${EC2_NAME_TAG}" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text --region us-east-1)

          echo "Target instance: $INSTANCE_ID"

          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Install PostgreSQL 15" \
            --parameters 'commands=[
              "set -euxo pipefail",
              "apt-get update -y",
              "apt-get install -y curl gnupg2 lsb-release ca-certificates sudo software-properties-common",
              "curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /usr/share/keyrings/postgresql.gpg",
              "echo \"deb [signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main\" > /etc/apt/sources.list.d/pgdg.list",
              "apt-get update -y",
              "apt-get install -y postgresql-15 postgresql-client-15",
              "systemctl enable postgresql",
              "systemctl start postgresql",
              "sed -i \"s/^#listen_addresses = 'localhost'/listen_addresses = '*'\/g\" /etc/postgresql/15/main/postgresql.conf",
              "echo \"host all all 0.0.0.0/0 md5\" >> /etc/postgresql/15/main/pg_hba.conf",
              "systemctl restart postgresql"
            ]' \
            --region us-east-1 \
            --output text

      - name: üåç Terraform REST API Init & Apply
        working-directory: ./infra/api
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform init
          terraform apply -auto-approve -var-file=dev.tfvars
